/*
 * Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* tslint:disable */
import * as Long from 'long';
import {Address} from '../Address';
import {AddressCodec} from'../builtin/AddressCodec';
import {MemberCodec} from '../builtin/MemberCodec';
import {Data} from '../serialization/Data';
import {SimpleEntryViewCodec} from '../builtin/SimpleEntryViewCodec';
import {DistributedObjectInfoCodec} from '../builtin/DistributedObjectInfoCodec';
import {DistributedObjectInfo} from '../builtin/DistributedObjectInfo';
import {Member} from '../core/Member';
import {UUID} from '../core/UUID';
import {FixedSizeTypes} from '../builtin/FixedSizeTypes'
import {BitsUtil} from '../BitsUtil'
import {ClientConnection} from '../invocation/ClientConnection'
import {ClientMessage, Frame} from '../ClientMessage'
import {Buffer} from 'safe-buffer'
import {ClientProtocolErrorCodes} from '../protocol/ClientProtocolErrorCodes'
import {CodecUtil} from '../builtin/CodecUtil'
import {DataCodec} from '../builtin/DataCodec'
import {ErrorCodec} from '../protocol/ErrorCodec'
import {ErrorsCodec} from '../protocol/ErrorsCodec'
import {ListIntegerCodec} from '../builtin/ListIntegerCodec'
import {ListUUIDCodec} from '../builtin/ListUUIDCodec'
import {ListLongCodec} from '../builtin/ListLongCodec'
import {ListMultiFrameCodec} from '../builtin/ListMultiFrameCodec'
import {LongArrayCodec} from '../builtin/LongArrayCodec'
import {MapCodec} from '../builtin/MapCodec'
import {MapIntegerLongCodec} from '../builtin/MapIntegerLongCodec'
import {MapIntegerUUIDCodec} from '../builtin/MapIntegerUUIDCodec'
import {MapStringLongCodec} from '../builtin/MapStringLongCodec'
import {MapUUIDLongCodec} from '../builtin/MapUUIDLongCodec'
import {StackTraceElementCodec} from '../protocol/StackTraceElementCodec'
import {StringCodec} from '../builtin/StringCodec'

    /* tslint:disabled:URF-UNREAD-PUBLIC-OR-PROTECTED-FIELD */
   export class RequestParameters {

        /**
         * Name of the user for authentication.
         */
        public username: string;

        /**
         * Password for the user.
         */
        public password: string;

        /**
         * Unique string identifying the connected client uniquely. This string is generated by the owner member server
         * on initial connection. When the client connects to a non-owner member it sets this field on the request.
         */
        public uuid: string;

        /**
         * Unique string identifying the server member uniquely.
         */
        public ownerUuid: string;

        /**
         * You must set this field to true while connecting to the owner member, otherwise set to false.
         */
        public isOwnerConnection: boolean;

        /**
         * The type of the client. E.g. JAVA, CPP, CSHARP, etc.
         */
        public clientType: string;

        /**
         * client side supported version to inform server side
         */
        public serializationVersion: number;

        /**
         * The Hazelcast version of the client. (e.g. 3.7.2)
         */
        public clientHazelcastVersion: string;

        /**
         * the name of the client instance
         */
        public clientName: string;

        /**
         * User defined labels of the client instance
         */
        public labels: Array<string>;

        /**
         * the expected partition count of the cluster. Checked on the server side when provided.
         * Authentication fails and 3:NOT_ALLOWED_IN_CLUSTER returned, in case of mismatch
         */
        public partitionCount: number;

        /**
         * the expected id of the cluster. Checked on the server side when provided.
         * Authentication fails and 3:NOT_ALLOWED_IN_CLUSTER returned, in case of mismatch
         */
        public clusterId: string;
    };

    /* tslint:disable:urf-unread-public-or-protected-field */
   export class ResponseParameters {

        /**
         * TODO DOC
         */
        public status : number;

        /**
         * TODO DOC
         */
        public address : Address;

        /**
         * Unique string identifying the connected client uniquely. This string is generated by the owner member server
         * on initial connection. When the client connects to a non-owner member it sets this field on the request.
         */
        public uuid : string;

        /**
         * Unique string identifying the server member uniquely.
         */
        public ownerUuid : string;

        /**
         * client side supported version to inform server side
         */
        public serializationVersion : number;

        /**
         * TODO DOC
         */
        public serverHazelcastVersion : string;

        /**
         * TODO DOC
         */
        public clientUnregisteredMembers : Array<Member>;

        /**
         * the expected partition count of the cluster. Checked on the server side when provided.
         * Authentication fails and 3:NOT_ALLOWED_IN_CLUSTER returned, in case of mismatch
         */
        public partitionCount : number;

        /**
         * the expected id of the cluster. Checked on the server side when provided.
         * Authentication fails and 3:NOT_ALLOWED_IN_CLUSTER returned, in case of mismatch
         */
        public clusterId : string;
    };

/**
 * TODO DOC
 */
export class ClientAuthenticationCodec {
    //hex: 0x000200
    public static REQUEST_MESSAGE_TYPE = 512;
    //hex: 0x000201
    public static RESPONSE_MESSAGE_TYPE = 513;
    private static REQUEST_IS_OWNER_CONNECTION_FIELD_OFFSET = ClientMessage.PARTITION_ID_FIELD_OFFSET + FixedSizeTypes.INT_SIZE_IN_BYTES;
    private static REQUEST_SERIALIZATION_VERSION_FIELD_OFFSET = ClientAuthenticationCodec.REQUEST_IS_OWNER_CONNECTION_FIELD_OFFSET + FixedSizeTypes.BOOLEAN_SIZE_IN_BYTES;
    private static REQUEST_PARTITION_COUNT_FIELD_OFFSET = ClientAuthenticationCodec.REQUEST_SERIALIZATION_VERSION_FIELD_OFFSET + FixedSizeTypes.BYTE_SIZE_IN_BYTES;
    private static REQUEST_INITIAL_FRAME_SIZE = ClientAuthenticationCodec.REQUEST_PARTITION_COUNT_FIELD_OFFSET + FixedSizeTypes.INT_SIZE_IN_BYTES;
    private static RESPONSE_STATUS_FIELD_OFFSET = ClientMessage.CORRELATION_ID_FIELD_OFFSET + FixedSizeTypes.LONG_SIZE_IN_BYTES;
    private static RESPONSE_SERIALIZATION_VERSION_FIELD_OFFSET = ClientAuthenticationCodec.RESPONSE_STATUS_FIELD_OFFSET + FixedSizeTypes.BYTE_SIZE_IN_BYTES;
    private static RESPONSE_PARTITION_COUNT_FIELD_OFFSET = ClientAuthenticationCodec.RESPONSE_SERIALIZATION_VERSION_FIELD_OFFSET + FixedSizeTypes.BYTE_SIZE_IN_BYTES;
    private static RESPONSE_INITIAL_FRAME_SIZE = ClientAuthenticationCodec.RESPONSE_PARTITION_COUNT_FIELD_OFFSET + FixedSizeTypes.INT_SIZE_IN_BYTES;

    private ClientAuthenticationCodec() {
    }


    static encodeRequest(username: string, password: string, uuid: string, ownerUuid: string, isOwnerConnection: boolean, clientType: string, serializationVersion: number, clientHazelcastVersion: string, clientName: string, labels: Array<string>, partitionCount: number, clusterId: string) {
        var clientMessage = ClientMessage.createForEncode();
        clientMessage.setRetryable(true);
        clientMessage.setAcquiresResource(false);
        clientMessage.setOperationName("Client.Authentication");
        var initialFrame : Frame= new Frame(Buffer.allocUnsafe(ClientAuthenticationCodec.REQUEST_INITIAL_FRAME_SIZE), ClientMessage.UNFRAGMENTED_MESSAGE);
        FixedSizeTypes.encodeInt(initialFrame.content, ClientMessage.TYPE_FIELD_OFFSET, ClientAuthenticationCodec.REQUEST_MESSAGE_TYPE);
        FixedSizeTypes.encodeBoolean(initialFrame.content, ClientAuthenticationCodec.REQUEST_IS_OWNER_CONNECTION_FIELD_OFFSET, isOwnerConnection);
        FixedSizeTypes.encodeByte(initialFrame.content, ClientAuthenticationCodec.REQUEST_SERIALIZATION_VERSION_FIELD_OFFSET, serializationVersion);
        FixedSizeTypes.encodeInt(initialFrame.content, ClientAuthenticationCodec.REQUEST_PARTITION_COUNT_FIELD_OFFSET, partitionCount);
        clientMessage.add(initialFrame);
        StringCodec.encode(clientMessage, username);
        StringCodec.encode(clientMessage, password);
        CodecUtil.encodeNullable(clientMessage,  uuid , StringCodec.encode );
        CodecUtil.encodeNullable(clientMessage,  ownerUuid , StringCodec.encode );
        StringCodec.encode(clientMessage, clientType);
        StringCodec.encode(clientMessage, clientHazelcastVersion);
        StringCodec.encode(clientMessage, clientName);
        ListMultiFrameCodec.encode(clientMessage, labels , StringCodec.encode);
        CodecUtil.encodeNullable(clientMessage,  clusterId , StringCodec.encode );
        return clientMessage;
    }

    static decodeRequest(clientMessage : ClientMessage) {
        var frame : Frame = clientMessage.get();
        var request : RequestParameters = new RequestParameters();
        var initialFrame : Frame= frame.next;
        request.isOwnerConnection =  FixedSizeTypes.decodeBoolean(initialFrame.content, ClientAuthenticationCodec.REQUEST_IS_OWNER_CONNECTION_FIELD_OFFSET);
        request.serializationVersion =  FixedSizeTypes.decodeByte(initialFrame.content, ClientAuthenticationCodec.REQUEST_SERIALIZATION_VERSION_FIELD_OFFSET);
        request.partitionCount =  FixedSizeTypes.decodeInt(initialFrame.content, ClientAuthenticationCodec.REQUEST_PARTITION_COUNT_FIELD_OFFSET);
        request.username = StringCodec.decode(frame);
        request.password = StringCodec.decode(frame);
        request.uuid = CodecUtil.decodeNullable(frame, StringCodec.decode);
        request.ownerUuid = CodecUtil.decodeNullable(frame, StringCodec.decode);
        request.clientType = StringCodec.decode(frame);
        request.clientHazelcastVersion = StringCodec.decode(frame);
        request.clientName = StringCodec.decode(frame);
        request.labels = ListMultiFrameCodec.decode(frame, StringCodec.decode);
        request.clusterId = CodecUtil.decodeNullable(frame, StringCodec.decode);
        return request;
    }


     static encodeResponse(status: number , address: Address , uuid: string , ownerUuid: string , serializationVersion: number , serverHazelcastVersion: string , clientUnregisteredMembers: Array<Member> , partitionCount: number , clusterId: string ) {
        var clientMessage = ClientMessage.createForEncode();
        var initialFrame : Frame = new Frame(Buffer.allocUnsafe(ClientAuthenticationCodec.RESPONSE_INITIAL_FRAME_SIZE), ClientMessage.UNFRAGMENTED_MESSAGE);
        FixedSizeTypes.encodeInt(initialFrame.content, ClientMessage.TYPE_FIELD_OFFSET, ClientAuthenticationCodec.RESPONSE_MESSAGE_TYPE);
        clientMessage.add(initialFrame);

        FixedSizeTypes.encodeByte(initialFrame.content, ClientAuthenticationCodec.RESPONSE_STATUS_FIELD_OFFSET, status);
        FixedSizeTypes.encodeByte(initialFrame.content, ClientAuthenticationCodec.RESPONSE_SERIALIZATION_VERSION_FIELD_OFFSET, serializationVersion);
        FixedSizeTypes.encodeInt(initialFrame.content, ClientAuthenticationCodec.RESPONSE_PARTITION_COUNT_FIELD_OFFSET, partitionCount);
        CodecUtil.encodeNullable(clientMessage,  address , AddressCodec.encode );
        CodecUtil.encodeNullable(clientMessage,  uuid , StringCodec.encode );
        CodecUtil.encodeNullable(clientMessage,  ownerUuid , StringCodec.encode );
        StringCodec.encode(clientMessage, serverHazelcastVersion);
        ListMultiFrameCodec.encodeNullable(clientMessage, clientUnregisteredMembers , MemberCodec.encode);
        StringCodec.encode(clientMessage, clusterId);
        return clientMessage;
    }

     static decodeResponse(clientMessage: ClientMessage) {
        var frame : Frame = clientMessage.get();
        var response : ResponseParameters = new ResponseParameters();
        var initialFrame : Frame = frame.next;
        response.status =  FixedSizeTypes.decodeByte(initialFrame.content, ClientAuthenticationCodec.RESPONSE_STATUS_FIELD_OFFSET);
        response.serializationVersion =  FixedSizeTypes.decodeByte(initialFrame.content, ClientAuthenticationCodec.RESPONSE_SERIALIZATION_VERSION_FIELD_OFFSET);
        response.partitionCount =  FixedSizeTypes.decodeInt(initialFrame.content, ClientAuthenticationCodec.RESPONSE_PARTITION_COUNT_FIELD_OFFSET);
        response.address = CodecUtil.decodeNullable(frame, AddressCodec.decode);
        response.uuid = CodecUtil.decodeNullable(frame, StringCodec.decode);
        response.ownerUuid = CodecUtil.decodeNullable(frame, StringCodec.decode);
        response.serverHazelcastVersion = StringCodec.decode(frame);
        response.clientUnregisteredMembers = ListMultiFrameCodec.decodeNullable(frame, MemberCodec.decode);
        response.clusterId = StringCodec.decode(frame);
        return response;
    }


static handle(clientMessage : ClientMessage, handleEventEntry: any, toObjectFunction: (data: Data) => any = null) {
            var messageType = clientMessage.getMessageType();
            var frame : Frame = clientMessage.get();
        }
}